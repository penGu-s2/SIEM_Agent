// Main entry point - import v√† kh·ªüi t·∫°o t·∫•t c·∫£ modules
console.log('üöÄ Loading SIEM Agent Dashboard...');

document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ Kh·ªüi t·∫°o SIEM Agent Dashboard...');
    try {
        // Expose functions cho C# g·ªçi
        window.updateCollectorsFromCSharp = function(jsonData) {
            console.log('üìä updateCollectorsFromCSharp called with:', jsonData);
            console.log('üìä JSON Data type:', typeof jsonData);
            console.log('üìä JSON Data length:', jsonData ? jsonData.length : 'null');
            console.log('üìä JSON Data preview:', jsonData ? jsonData.substring(0, 100) + '...' : 'null');
            
            try {
                // G·ªçi tr·ª±c ti·∫øp h√†m renderCollectors t·ª´ dashboard.js
                if (typeof window.renderCollectorsFromDashboardModule === 'function') {
                    console.log('üîÑ Calling renderCollectors function from dashboard module...');
                    const data = JSON.parse(jsonData);
                    window.renderCollectorsFromDashboardModule(data);
                    console.log('‚úÖ Collectors rendered successfully');
                } else {
                    console.error('‚ùå renderCollectorsFromDashboardModule function not available');
                }
            } catch (e) {
                console.error('Error in updateCollectorsFromCSharp:', e);
                console.error('Error details:', e.message);
                console.error('Stack trace:', e.stack);
            }
        };
        
        // Expose parser functions cho C# g·ªçi
        window.updateParsersFromCSharp = function(jsonData) {
            console.log('üìä updateParsersFromCSharp called with:', jsonData);
            try {
                if (typeof window.updateParsersFromCSharpForParserModule === 'function') {
                    console.log('üîÑ Calling updateParsersFromCSharpForParserModule...');
                    window.updateParsersFromCSharpForParserModule(jsonData);
                    console.log('‚úÖ Parsers updated successfully');
                } else if (typeof window.parserManager !== 'undefined' && window.parserManager) {
                    console.log('üîÑ Calling parserManager.renderParsers...');
                    window.parserManager.renderParsers(jsonData);
                    console.log('‚úÖ Parsers updated successfully');
                } else {
                    console.error('‚ùå Parser functions not available');
                }
            } catch (e) {
                console.error('‚ùå Error in updateParsersFromCSharp:', e);
            }
        };
        
        // Expose logs functions cho C# g·ªçi
        window.updateLogsFromCSharp = function(jsonData) {
            console.log('üìä updateLogsFromCSharp called with:', jsonData);
            try {
                if (typeof window.updateLogsFromCSharpForLogsModule === 'function') {
                    window.updateLogsFromCSharpForLogsModule(jsonData);
                } else {
                    console.error('‚ùå Logs functions not available');
                }
            } catch (e) {
                console.error('‚ùå Error in updateLogsFromCSharp:', e);
            }
        };
        
        // Expose log types functions cho C# g·ªçi
        window.updateLogTypesFromCSharp = function(jsonData) {
            console.log('üìä updateLogTypesFromCSharp called with:', jsonData);
            try {
                if (typeof window.updateLogTypesFromCSharpForLogsModule === 'function') {
                    window.updateLogTypesFromCSharpForLogsModule(jsonData);
                } else {
                    console.error('‚ùå updateLogTypesFromCSharpForLogsModule function not available');
                }
            } catch (e) {
                console.error('‚ùå Error in updateLogTypesFromCSharp:', e);
            }
        };
        
        // Expose Fluent Bit status functions cho C# g·ªçi
        window.updateFluentBitStatus = function(status) {
            console.log('üìä updateFluentBitStatus called with:', status);
            try {
                // C·∫≠p nh·∫≠t status cho logs module
                if (typeof window.updateFluentBitStatusFromLogsModule === 'function') {
                    window.updateFluentBitStatusFromLogsModule(status);
                }
                // C·∫≠p nh·∫≠t status cho config tab n·∫øu ƒëang m·ªü
                if (typeof window.updateFluentBitStatusFromCSharp === 'function') {
                    window.updateFluentBitStatusFromCSharp(status);
                }
                console.log('‚úÖ Fluent Bit status updated');
            } catch (e) {
                console.error('‚ùå Error in updateFluentBitStatus:', e);
            }
        };
        
        // Expose debug info functions cho C# g·ªçi
        window.showDebugInfo = function(jsonData) {
            console.log('üìä showDebugInfo called with:', jsonData);
            try {
                // G·ªçi tr·ª±c ti·∫øp h√†m showDebugInfo t·ª´ logs.js
                if (typeof window.showDebugInfoFromLogsModule === 'function') {
                    window.showDebugInfoFromLogsModule(jsonData);
                    console.log('‚úÖ Debug info shown successfully');
                } else {
                    console.error('‚ùå showDebugInfoFromLogsModule function not available');
                }
            } catch (e) {
                console.error('Error in showDebugInfo:', e);
            }
        };
        
        // Expose parser popup functions cho C# g·ªçi
        window.openEditParserPopup = function(parserJson, idx) {
            console.log('üìä openEditParserPopup called with:', parserJson, idx);
            try {
                const parser = typeof parserJson === 'string' ? JSON.parse(parserJson) : parserJson;
                // G·ªçi tr·ª±c ti·∫øp h√†m openEditParserPopup t·ª´ parsers.js
                if (typeof window.openEditParserPopupFromParsersModule === 'function') {
                    window.openEditParserPopupFromParsersModule(parser, idx);
                    console.log('‚úÖ Parser popup opened successfully');
                } else {
                    console.error('‚ùå openEditParserPopupFromParsersModule function not available');
                }
            } catch (e) {
                console.error('Parser JSON kh√¥ng h·ª£p l·ªá:', e);
            }
        };
        
        // Expose parser names functions cho C# g·ªçi
        window.setParserNameOptions = function(parserNames) {
            try {
                window.availableParserNames = parserNames;
                console.log('‚úÖ Parser names set successfully');
            } catch (e) {
                console.error('Error in setParserNameOptions:', e);
            }
        };

        // Expose collector action functions cho C# g·ªçi
        window.showAddCollectorPopup = function() {
            if (typeof window.showAddCollectorPopupFromActionsModule === 'function') {
                window.showAddCollectorPopupFromActionsModule();
            } else {
                console.error('‚ùå showAddCollectorPopupFromActionsModule function not available');
            }
        };

        window.showEditCollectorPopup = function(collector, idx) {
            if (typeof window.showEditCollectorPopupFromActionsModule === 'function') {
                window.showEditCollectorPopupFromActionsModule(collector, idx);
            } else {
                console.error('‚ùå showEditCollectorPopupFromActionsModule function not available');
            }
        };

        window.deleteCollector = function(idx) {
            if (typeof window.deleteCollectorFromActionsModule === 'function') {
                window.deleteCollectorFromActionsModule(idx);
            } else {
                console.error('‚ùå deleteCollectorFromActionsModule function not available');
            }
        };

        // Expose sendMessageToCSharp function cho C# g·ªçi
        window.sendMessageToCSharp = function(action, data = {}) {
            if (typeof window.sendMessageToCSharpFromActionsModule === 'function') {
                window.sendMessageToCSharpFromActionsModule(action, data);
            } else {
                console.error('‚ùå sendMessageToCSharpFromActionsModule function not available');
            }
        };

        // Expose function ƒë·ªÉ C# c·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n file
        window.updateFilePathsFromCSharp = function(filePaths) {
            if (typeof window.updateFilePathsFromCSharpForConfigModule === 'function') {
                window.updateFilePathsFromCSharpForConfigModule(filePaths);
            } else {
                console.error('‚ùå updateFilePathsFromCSharpForConfigModule function not available');
            }
        };

        // Expose function ƒë·ªÉ C# c·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n log file
        window.updateLogFilePathFromCSharp = function(logType, filePath) {
            if (typeof window.updateLogFilePathFromCSharpForLogsModule === 'function') {
                window.updateLogFilePathFromCSharpForLogsModule(logType, filePath);
            } else {
                console.error('‚ùå updateLogFilePathFromCSharpForLogsModule function not available');
            }
        };

        console.log('‚úÖ Dashboard ƒë√£ s·∫µn s√†ng v·ªõi ƒë·∫ßy ƒë·ªß ch·ª©c nƒÉng!');

    } catch (error) {
        console.error('‚ùå L·ªói kh·ªüi t·∫°o dashboard:', error);
        alert('C√≥ l·ªói kh·ªüi t·∫°o dashboard: ' + error.message);
    }
});
