// Config module - qu·∫£n l√Ω tab Config v√† c·∫•u h√¨nh Fluent Bit
// S·ª≠ d·ª•ng global variables thay v√¨ ES6 modules ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi script loading

let configManager = null;
let pendingFilePaths = null; // L∆∞u tr·ªØ file paths t·∫°m th·ªùi

window.initConfigTab = function() {
    if (configManager) return;
    
    configManager = new ConfigManager();
    configManager.init();
    
    // N·∫øu c√≥ file paths ƒëang ch·ªù, c·∫≠p nh·∫≠t ngay
    if (pendingFilePaths) {
        console.log('üìÅ Applying pending file paths...');
        configManager.updateFilePaths(
            pendingFilePaths.configPath,
            pendingFilePaths.parsersPath,
            pendingFilePaths.logDir
        );
        pendingFilePaths = null;
    }
}

class ConfigManager {
    constructor() {
        this.configs = {};
        this.currentConfig = null;
    }
    
    init() {
        this.renderConfigTab();
        this.loadConfigurations();
    }
    
    renderConfigTab() {
        const container = document.getElementById('config-content');
        if (!container) return;
        
        container.innerHTML = `
            <div class="config-header" style="margin-bottom: 24px;">
                <h2 style="color: #F9FAFB; margin: 0 0 8px 0; font-size: 24px;">‚öôÔ∏è Fluent Bit Configuration</h2>
                <p style="color: #D1D5DB; margin: 0; font-size: 14px;">Qu·∫£n l√Ω c·∫•u h√¨nh Fluent Bit, backup v√† restore settings</p>
            </div>
            
            <div class="config-sections" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 20px;">
                <!-- Service Configuration -->
                <div class="config-section" style="background: #1F2937; border-radius: 8px; padding: 20px; border: 1px solid #374151;">
                    <h3 style="color: #F9FAFB; margin: 0 0 16px 0; font-size: 18px;">üîß Service Configuration</h3>
                    <div class="config-item" style="margin-bottom: 12px;">
                        <label style="color: #D1D5DB; font-size: 14px; display: block; margin-bottom: 4px;">Flush Interval:</label>
                        <input type="number" id="flushInterval" value="1" min="1" max="3600" style="
                            width: 100%;
                            padding: 8px 12px;
                            border: 1px solid #4B5563;
                            border-radius: 6px;
                            background: #374151;
                            color: #F9FAFB;
                            font-size: 14px;
                        ">
                    </div>
                    <div class="config-item" style="margin-bottom: 12px;">
                        <label style="color: #D1D5DB; font-size: 14px; display: block; margin-bottom: 4px;">Log Level:</label>
                        <select id="logLevel" style="
                            width: 100%;
                            padding: 8px 12px;
                            border: 1px solid #4B5563;
                            border-radius: 6px;
                            background: #374151;
                            color: #F9FAFB;
                            font-size: 14px;
                        ">
                            <option value="error">Error</option>
                            <option value="warn">Warning</option>
                            <option value="info" selected>Info</option>
                            <option value="debug">Debug</option>
                            <option value="trace">Trace</option>
                        </select>
                    </div>
                    <div class="config-item" style="margin-bottom: 12px;">
                        <label style="color: #D1D5DB; font-size: 14px; display: block; margin-bottom: 4px;">Daemon Mode:</label>
                        <select id="daemonMode" style="
                            width: 100%;
                            padding: 8px 12px;
                            border: 1px solid #4B5563;
                            border-radius: 6px;
                            background: #374151;
                            color: #F9FAFB;
                            font-size: 14px;
                        ">
                            <option value="Off" selected>Off</option>
                            <option value="On">On</option>
                        </select>
                    </div>
                    <div class="config-item" style="margin-bottom: 16px;">
                        <label style="color: #D1D5DB; font-size: 14px; display: block; margin-bottom: 4px;">Parsers File:</label>
                        <input type="text" id="parsersFile" value="parsers.conf" style="
                            width: 100%;
                            padding: 8px 12px;
                            border: 1px solid #4B5563;
                            border-radius: 6px;
                            background: #374151;
                            color: #F9FAFB;
                            font-size: 14px;
                        ">
                    </div>
                    <button onclick="configManager.saveServiceConfig()" style="
                        width: 100%;
                        padding: 10px;
                        background: #3B82F6;
                        color: white;
                        border: none;
                        border-radius: 6px;
                        cursor: pointer;
                        font-size: 14px;
                        font-weight: 600;
                    ">üíæ L∆∞u Service Config</button>
                </div>
                
                <!-- File Management -->
                <div class="config-section" style="background: #1F2937; border-radius: 8px; padding: 20px; border: 1px solid #374151;">
                    <h3 style="color: #F9FAFB; margin: 0 0 16px 0; font-size: 18px;">üìÅ File Management</h3>
                    <div class="config-item" style="margin-bottom: 12px;">
                        <label style="color: #D1D5DB; font-size: 14px; display: block; margin-bottom: 4px;">Config File:</label>
                        <div id="configFilePath" style="
                            padding: 8px 12px;
                            background: #374151;
                            border-radius: 6px;
                            color: #D1D5DB;
                            font-family: monospace;
                            font-size: 13px;
                        ">ƒêang t·∫£i...</div>
                    </div>
                    <div class="config-item" style="margin-bottom: 12px;">
                        <label style="color: #D1D5DB; font-size: 14px; display: block; margin-bottom: 4px;">Parsers File:</label>
                        <div id="parsersFilePath" style="
                            padding: 8px 12px;
                            background: #374151;
                            border-radius: 6px;
                            color: #D1D5DB;
                            font-family: monospace;
                            font-size: 13px;
                        ">ƒêang t·∫£i...</div>
                    </div>
                    <div class="config-item" style="margin-bottom: 12px;">
                        <label style="color: #D1D5DB; font-size: 14px; display: block; margin-bottom: 4px;">Log Directory:</label>
                        <div id="logDirectoryPath" style="
                            padding: 8px 12px;
                            background: #374151;
                            border-radius: 6px;
                            color: #D1D5DB;
                            font-family: monospace;
                            font-size: 13px;
                        ">ƒêang t·∫£i...</div>
                    </div>
                    <div class="config-buttons" style="display: flex; flex-direction: column; gap: 8px;">
                        <button onclick="configManager.backupConfig()" style="
                            padding: 10px;
                            background: #10B981;
                            color: white;
                            border: none;
                            border-radius: 6px;
                            cursor: pointer;
                            font-size: 14px;
                            font-weight: 600;
                        ">üíæ Backup Configuration</button>
                        <button onclick="configManager.restoreConfig()" style="
                            padding: 10px;
                            background: #F59E0B;
                            color: white;
                            border: none;
                            border-radius: 6px;
                            cursor: pointer;
                            font-size: 14px;
                            font-weight: 600;
                        ">üìÇ Restore Configuration</button>
                        <button onclick="configManager.viewConfig()" style="
                            padding: 10px;
                            background: #8B5CF6;
                            color: white;
                            border: none;
                            border-radius: 6px;
                            cursor: pointer;
                            font-size: 14px;
                            font-weight: 600;
                        ">üëÅÔ∏è Xem Configuration</button>
                    </div>
                </div>
                
                <!-- Fluent Bit Control -->
                <div class="config-section" style="background: #1F2937; border-radius: 8px; padding: 20px; border: 1px solid #374151;">
                    <h3 style="color: #F9FAFB; margin: 0 0 16px 0; font-size: 18px;">üéÆ Fluent Bit Control</h3>
                    <div class="config-item" style="margin-bottom: 16px;">
                        <label style="color: #D1D5DB; font-size: 14px; display: block; margin-bottom: 8px;">Service Status:</label>
                        <div id="serviceStatus" style="
                            padding: 8px 12px;
                            background: #374151;
                            border-radius: 6px;
                            color: #D1D5DB;
                            font-size: 14px;
                            text-align: center;
                        ">üîÑ ƒêang ki·ªÉm tra...</div>
                    </div>
                    <div class="config-buttons" style="display: flex; flex-direction: column; gap: 8px;">
                        <button onclick="configManager.startFluentBit()" style="
                            padding: 10px;
                            background: #10B981;
                            color: white;
                            border: none;
                            border-radius: 6px;
                            cursor: pointer;
                            font-size: 14px;
                            font-weight: 600;
                        ">‚ñ∂Ô∏è Start Fluent Bit</button>
                        <button onclick="configManager.stopFluentBit()" style="
                            padding: 10px;
                            background: #EF4444;
                            color: white;
                            border: none;
                            border-radius: 6px;
                            cursor: pointer;
                            font-size: 14px;
                            font-weight: 600;
                        ">‚èπÔ∏è Stop Fluent Bit</button>
                        <button onclick="configManager.restartFluentBit()" style="
                            padding: 10px;
                            background: #F59E0B;
                            color: white;
                            border: none;
                            border-radius: 6px;
                            cursor: pointer;
                            font-size: 14px;
                            font-weight: 600;
                        ">üîÑ Restart Fluent Bit</button>
                    </div>
                </div>
                
                                 <!-- Config Sync Management -->
                 <div class="config-section" style="background: #1F2937; border-radius: 8px; padding: 20px; border: 1px solid #374151;">
                     <h3 style="color: #F9FAFB; margin: 0 0 16px 0; font-size: 18px;">üîÑ Config Sync Management</h3>
                     <div class="config-item" style="margin-bottom: 12px;">
                         <label style="color: #D1D5DB; font-size: 14px; display: block; margin-bottom: 4px;">Sync Status:</label>
                         <div id="syncStatus" style="
                             padding: 8px 12px;
                             background: #374151;
                             border-radius: 6px;
                             color: #D1D5DB;
                             font-size: 14px;
                             text-align: center;
                         ">üîÑ ƒêang ki·ªÉm tra...</div>
                     </div>
                     <div class="config-item" style="margin-bottom: 12px;">
                         <label style="color: #D1D5DB; font-size: 14px; display: block; margin-bottom: 4px;">Last Sync:</label>
                         <div id="lastSyncTime" style="
                             padding: 8px 12px;
                             background: #374151;
                             border-radius: 6px;
                             color: #D1D5DB;
                             font-family: monospace;
                             font-size: 13px;
                         ">Ch∆∞a ƒë·ªìng b·ªô</div>
                     </div>
                     <div class="config-item" style="margin-bottom: 12px;">
                         <label style="color: #D1D5DB; font-size: 14px; display: block; margin-bottom: 4px;">API URL:</label>
                         <div id="syncApiUrl" style="
                             padding: 8px 12px;
                             background: #374151;
                             border-radius: 6px;
                             color: #D1D5DB;
                             font-family: monospace;
                             font-size: 13px;
                             word-break: break-all;
                         ">ƒêang t·∫£i...</div>
                     </div>
                     <div class="config-buttons" style="display: flex; flex-direction: column; gap: 8px;">
                         <button onclick="configManager.enableConfigSync()" style="
                             padding: 10px;
                             background: #10B981;
                             color: white;
                             border: none;
                             border-radius: 6px;
                             cursor: pointer;
                             font-size: 14px;
                             font-weight: 600;
                         ">‚úÖ B·∫≠t ƒê·ªìng B·ªô</button>
                         <button onclick="configManager.disableConfigSync()" style="
                             padding: 10px;
                             background: #EF4444;
                             color: white;
                             border: none;
                             border-radius: 6px;
                             cursor: pointer;
                             font-size: 14px;
                             font-weight: 600;
                         ">‚ùå T·∫Øt ƒê·ªìng B·ªô</button>
                         <button onclick="configManager.manualSync()" style="
                             padding: 10px;
                             background: #3B82F6;
                             color: white;
                             border: none;
                             border-radius: 6px;
                             cursor: pointer;
                             font-size: 14px;
                             font-weight: 600;
                         ">üîÑ ƒê·ªìng B·ªô Ngay</button>
                                                   <button onclick="configManager.viewSyncLogs()" style="
                              padding: 10px;
                              background: #8B5CF6;
                              color: white;
                              border: none;
                              border-radius: 6px;
                              cursor: pointer;
                              font-size: 14px;
                              font-weight: 600;
                          ">üìã Xem Sync Logs</button>
                          <button onclick="configManager.refreshSyncStatus()" style="
                              padding: 10px;
                              background: #6B7280;
                              color: white;
                              border: none;
                              border-radius: 6px;
                              cursor: pointer;
                              font-size: 14px;
                              font-weight: 600;
                          ">üîÑ Refresh Status</button>
                     </div>
                 </div>
                 
                 <!-- Logs & Monitoring -->
                 <div class="config-section" style="background: #1F2937; border-radius: 8px; padding: 20px; border: 1px solid #374151;">
                     <h3 style="color: #F9FAFB; margin: 0 0 16px 0; font-size: 18px;">üìä Logs & Monitoring</h3>
                     <div class="config-item" style="margin-bottom: 12px;">
                         <label style="color: #D1D5DB; font-size: 14px; display: block; margin-bottom: 4px;">Log Directory:</label>
                         <div style="
                             padding: 8px 12px;
                             background: #374151;
                             border-radius: 6px;
                             color: #D1D5DB;
                             font-family: monospace;
                             font-size: 13px;
                         ">.\\logs\\</div>
                     </div>
                     <div class="config-buttons" style="display: flex; flex-direction: column; gap: 8px;">
                         <button onclick="configManager.viewFluentBitLogs()" style="
                             padding: 10px;
                             background: #3B82F6;
                             color: white;
                             border: none;
                             border-radius: 6px;
                             cursor: pointer;
                             font-size: 14px;
                             font-weight: 600;
                         ">üìã Xem Fluent Bit Logs</button>
                         <button onclick="configManager.clearLogs()" style="
                             padding: 10px;
                             background: #EF4444;
                             color: white;
                             border: none;
                             border-radius: 6px;
                             cursor: pointer;
                             font-size: 14px;
                             font-weight: 600;
                         ">üóëÔ∏è X√≥a Logs</button>
                         <button onclick="configManager.exportLogs()" style="
                             padding: 10px;
                             background: #10B981;
                             color: white;
                             border: none;
                             border-radius: 6px;
                             cursor: pointer;
                             font-size: 14px;
                             font-weight: 600;
                         ">üì§ Export Logs</button>
                         <button onclick="configManager.restartApplication()" style="
                             padding: 10px;
                             background: #DC2626;
                             color: white;
                             border: none;
                             border-radius: 6px;
                             cursor: pointer;
                             font-size: 14px;
                             font-weight: 600;
                         ">üîÑ Kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng</button>
                     </div>
                 </div>
            </div>
            
            <!-- Configuration Preview -->
            <div class="config-preview" style="margin-top: 24px;">
                <h3 style="color: #F9FAFB; margin: 0 0 16px 0; font-size: 18px;">üìã Configuration Preview</h3>
                <div id="configPreview" style="
                    background: #111827;
                    border-radius: 8px;
                    padding: 20px;
                    border: 1px solid #374151;
                    font-family: 'Consolas', 'Monaco', monospace;
                    font-size: 13px;
                    color: #D1D5DB;
                    max-height: 400px;
                    overflow-y: auto;
                    white-space: pre-wrap;
                ">ƒêang t·∫£i configuration...</div>
            </div>
        `;
        
        this.attachEventListeners();
    }
    
    attachEventListeners() {
        // C√≥ th·ªÉ th√™m c√°c event listeners kh√°c ·ªü ƒë√¢y
    }
    
         loadConfigurations() {
         // Load service configuration
         this.loadServiceConfig();
         
         // Load Fluent Bit status
         this.checkFluentBitStatus();
         
         // Load configuration preview
         this.loadConfigPreview();
         
         // Load file paths t·ª´ c·∫•u h√¨nh th·ª±c t·∫ø
         this.loadFilePaths();
         
         // Load config sync status
         this.loadConfigSyncStatus();
     }
    
    loadFilePaths() {
        console.log('üìÅ Loading file paths...');
        console.log('üîç Config tab visible:', document.getElementById('config-content')?.style.display !== 'none');
        
        // G·ª≠i message t·ªõi C# ƒë·ªÉ l·∫•y ƒë∆∞·ªùng d·∫´n file th·ª±c t·∫ø
        if (window.chrome && window.chrome.webview) {
            window.chrome.webview.postMessage({ action: 'get_file_paths' });
            console.log('‚úÖ get_file_paths message sent');
        } else {
            console.error('‚ùå WebView2 not available');
        }
    }
    
    // Method ƒë·ªÉ c·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n file t·ª´ C#
    updateFilePaths(configPath, parsersPath, logDir) {
        console.log('üìÅ Updating file paths:');
        console.log('- configPath:', configPath, 'Type:', typeof configPath);
        console.log('- parsersPath:', parsersPath, 'Type:', typeof parsersPath);
        console.log('- logDir:', logDir, 'Type:', typeof logDir);
        
        // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o HTML ƒë√£ ƒë∆∞·ª£c render
        setTimeout(() => {
            const configPathElement = document.getElementById('configFilePath');
            const parsersPathElement = document.getElementById('parsersFilePath');
            const logDirElement = document.getElementById('logDirectoryPath');
            
            console.log('üîç Looking for elements:');
            console.log('- configFilePath:', configPathElement);
            console.log('- parsersFilePath:', parsersPathElement);
            console.log('- logDirectoryPath:', logDirElement);
            
            if (configPathElement && configPath) {
                configPathElement.textContent = configPath;
                console.log('‚úÖ Config path updated to:', configPath);
            } else {
                console.log('‚ùå Config path element not found or path is empty');
                console.log('Element:', configPathElement);
                console.log('Path:', configPath);
            }
            
            if (parsersPathElement && parsersPath) {
                parsersPathElement.textContent = parsersPath;
                console.log('‚úÖ Parsers path updated to:', parsersPath);
            } else {
                console.log('‚ùå Parsers path element not found or path is empty');
                console.log('Element:', parsersPathElement);
                console.log('Path:', parsersPath);
            }
            
            if (logDirElement && logDir) {
                logDirElement.textContent = logDir;
                console.log('‚úÖ Log directory updated to:', logDir);
            } else {
                console.log('‚ùå Log directory element not found or path is empty');
                console.log('Element:', logDirElement);
                console.log('Path:', logDir);
            }
        }, 100);
    }
    
    loadServiceConfig() {
        // Load t·ª´ C# ho·∫∑c t·ª´ file config
        if (window.chrome && window.chrome.webview) {
            window.chrome.webview.postMessage({ action: 'get_service_config' });
        }
    }
    
    checkFluentBitStatus() {
        console.log('üîç Checking Fluent Bit status...');
        if (window.chrome && window.chrome.webview) {
            window.chrome.webview.postMessage({ action: 'check_fluentbit_status' });
        }
    }
    
         loadConfigPreview() {
         if (window.chrome && window.chrome.webview) {
             window.chrome.webview.postMessage({ action: 'get_config_preview' });
         }
     }
     
     // Config Sync Management Methods
     loadConfigSyncStatus() {
         if (window.chrome && window.chrome.webview) {
             window.chrome.webview.postMessage({ action: 'get_config_sync_status' });
         }
     }
     
     enableConfigSync() {
         if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën b·∫≠t ƒë·ªìng b·ªô config t·ª´ API?\n\n‚ö†Ô∏è H√†nh ƒë·ªông n√†y s·∫Ω:\n‚úÖ B·∫≠t ƒë·ªìng b·ªô t·ª± ƒë·ªông\n‚úÖ T·∫£i config t·ª´ server\n‚úÖ C·∫≠p nh·∫≠t fluent-bit.conf')) {
             if (window.chrome && window.chrome.webview) {
                 window.chrome.webview.postMessage({ action: 'enable_config_sync' });
             }
             showNotification('ƒêang b·∫≠t ƒë·ªìng b·ªô config...', 'info');
         }
     }
     
     disableConfigSync() {
         if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën t·∫Øt ƒë·ªìng b·ªô config?\n\n‚ö†Ô∏è H√†nh ƒë·ªông n√†y s·∫Ω:\n‚ùå T·∫Øt ƒë·ªìng b·ªô t·ª± ƒë·ªông\n‚ùå Kh√¥ng c·∫≠p nh·∫≠t config t·ª´ server')) {
             if (window.chrome && window.chrome.webview) {
                 window.chrome.webview.postMessage({ action: 'disable_config_sync' });
             }
             showNotification('ƒêang t·∫Øt ƒë·ªìng b·ªô config...', 'info');
         }
     }
     
     manualSync() {
         if (window.chrome && window.chrome.webview) {
             window.chrome.webview.postMessage({ action: 'manual_config_sync' });
         }
         showNotification('ƒêang ƒë·ªìng b·ªô config t·ª´ API...', 'info');
     }
     
           viewSyncLogs() {
          if (window.chrome && window.chrome.webview) {
              window.chrome.webview.postMessage({ action: 'view_sync_logs' });
          }
          showNotification('ƒêang t·∫£i sync logs...', 'info');
      }
      
      refreshSyncStatus() {
          if (window.chrome && window.chrome.webview) {
              window.chrome.webview.postMessage({ action: 'get_config_sync_status' });
          }
          showNotification('ƒêang c·∫≠p nh·∫≠t tr·∫°ng th√°i...', 'info');
      }
     
           // Update Config Sync UI Methods
      updateConfigSyncStatus(syncData) {
          console.log('üîÑ updateConfigSyncStatus called with:', syncData);
          console.log('üîÑ syncData type:', typeof syncData);
          
          const statusElement = document.getElementById('syncStatus');
          const lastSyncElement = document.getElementById('lastSyncTime');
          const apiUrlElement = document.getElementById('syncApiUrl');
          
          console.log('üîç Elements found:', {
              statusElement: !!statusElement,
              lastSyncElement: !!lastSyncElement,
              apiUrlElement: !!apiUrlElement
          });
          
          if (statusElement && lastSyncElement && apiUrlElement) {
              try {
                  const sync = typeof syncData === 'string' ? JSON.parse(syncData) : syncData;
                  console.log('üîÑ Parsed sync data:', sync);
                 
                                                     // Update sync status
                  console.log('üîÑ Updating sync status. enabled =', sync.enabled);
                  if (sync.enabled) {
                      statusElement.textContent = 'üü¢ ƒêang ƒë·ªìng b·ªô';
                      statusElement.style.color = '#10B981';
                      statusElement.style.fontWeight = 'bold';
                      console.log('‚úÖ Status updated to: ƒêang ƒë·ªìng b·ªô');
                  } else {
                      statusElement.textContent = 'üî¥ ƒê√£ t·∫Øt';
                      statusElement.style.color = '#EF4444';
                      statusElement.style.fontWeight = 'bold';
                      console.log('‚úÖ Status updated to: ƒê√£ t·∫Øt');
                  }
                  
                  // Update last sync time
                  console.log('üîÑ Updating last sync time:', sync.lastSyncTime);
                  if (sync.lastSyncTime) {
                      lastSyncElement.textContent = sync.lastSyncTime;
                      console.log('‚úÖ Last sync time updated to:', sync.lastSyncTime);
                  } else {
                      lastSyncElement.textContent = 'Ch∆∞a ƒë·ªìng b·ªô';
                      console.log('‚úÖ Last sync time set to: Ch∆∞a ƒë·ªìng b·ªô');
                  }
                  
                  // Update API URL
                  console.log('üîÑ Updating API URL:', sync.apiUrl);
                  if (sync.apiUrl) {
                      apiUrlElement.textContent = sync.apiUrl;
                      console.log('‚úÖ API URL updated to:', sync.apiUrl);
                  } else {
                      apiUrlElement.textContent = 'Ch∆∞a c·∫•u h√¨nh';
                      console.log('‚úÖ API URL set to: Ch∆∞a c·∫•u h√¨nh');
                  }
                 
                 console.log('‚úÖ Config sync status updated:', sync);
             } catch (e) {
                 console.error('‚ùå Error parsing sync data:', e);
                 statusElement.textContent = '‚ùì Error loading status';
                 statusElement.style.color = '#EF4444';
             }
         }
     }
    
    // Service Configuration Methods
    saveServiceConfig() {
        const flushInterval = document.getElementById('flushInterval').value;
        const logLevel = document.getElementById('logLevel').value;
        const daemonMode = document.getElementById('daemonMode').value;
        const parsersFile = document.getElementById('parsersFile')?.value || 'parsers.conf';
        
        const config = {
            flushInterval: parseInt(flushInterval),
            logLevel: logLevel,
            daemonMode: daemonMode,
            parsersFile: parsersFile
        };
        
        if (window.chrome && window.chrome.webview) {
            window.chrome.webview.postMessage({
                action: 'save_service_config',
                data: config
            });
        }
        showNotification('ƒêang l∆∞u service configuration...', 'info');
    }
    
    // File Management Methods
    backupConfig() {
        if (window.chrome && window.chrome.webview) {
            window.chrome.webview.postMessage({ action: 'backup_config' });
        }
        showNotification('ƒêang t·∫°o backup configuration...', 'info');
    }
    
    restoreConfig() {
        // T·∫°o file input ƒë·ªÉ ch·ªçn file backup
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = '.conf,.backup';
        input.onchange = (e) => {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    const content = e.target.result;
                    if (window.chrome && window.chrome.webview) {
                        window.chrome.webview.postMessage({ 
                            action: 'restore_config', 
                            content: content 
                        });
                    }
                    showNotification('ƒêang restore configuration...', 'info');
                };
                reader.readAsText(file);
            }
        };
        input.click();
    }
    
    viewConfig() {
        if (window.chrome && window.chrome.webview) {
            window.chrome.webview.postMessage({ action: 'view_config' });
        }
        showNotification('ƒêang t·∫£i configuration...', 'info');
    }
    
    // Fluent Bit Control Methods
    startFluentBit() {
        if (window.chrome && window.chrome.webview) {
            window.chrome.webview.postMessage({ action: 'start_fluentbit' });
        }
        showNotification('ƒêang kh·ªüi ƒë·ªông Fluent Bit...', 'info');
    }
    
    stopFluentBit() {
        if (window.chrome && window.chrome.webview) {
            window.chrome.webview.postMessage({ action: 'stop_fluentbit' });
        }
        showNotification('ƒêang d·ª´ng Fluent Bit...', 'info');
    }
    
    restartFluentBit() {
        if (window.chrome && window.chrome.webview) {
            window.chrome.webview.postMessage({ action: 'restart_fluentbit' });
        }
        showNotification('ƒêang restart Fluent Bit...', 'info');
    }
    
    restartApplication() {
        if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng? T·∫•t c·∫£ d·ªØ li·ªáu ch∆∞a l∆∞u s·∫Ω b·ªã m·∫•t.')) {
            if (window.chrome && window.chrome.webview) {
                window.chrome.webview.postMessage({ action: 'restart_application' });
            }
            showNotification('ƒêang kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng...', 'info');
        }
    }
    
    // Logs & Monitoring Methods
    viewFluentBitLogs() {
        if (window.chrome && window.chrome.webview) {
            window.chrome.webview.postMessage({ action: 'view_fluentbit_logs' });
        }
        showNotification('ƒêang t·∫£i Fluent Bit logs...', 'info');
    }
    
    clearLogs() {
        if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t·∫•t c·∫£ logs?\n\n‚ö†Ô∏è H√†nh ƒë·ªông n√†y s·∫Ω:\n‚ùå X√≥a t·∫•t c·∫£ log files\n‚ùå Kh√¥ng th·ªÉ ho√†n t√°c')) {
            if (window.chrome && window.chrome.webview) {
                window.chrome.webview.postMessage({ action: 'clear_logs' });
            }
            showNotification('ƒêang x√≥a logs...', 'info');
        }
    }
    
    exportLogs() {
        if (window.chrome && window.chrome.webview) {
            window.chrome.webview.postMessage({ action: 'export_logs' });
        }
        showNotification('ƒêang export logs...', 'info');
    }
    
    // Update UI Methods
    updateServiceStatus(statusData) {
        const statusElement = document.getElementById('serviceStatus');
        if (statusElement) {
            try {
                // Parse status data t·ª´ C#
                const status = typeof statusData === 'string' ? JSON.parse(statusData) : statusData;
                
                let statusText = '';
                let statusColor = '';
                
                if (status.isRunning) {
                    statusText = `üü¢ Running (${status.processCount} processes)`;
                    statusColor = '#10B981';
                } else {
                    statusText = 'üî¥ Stopped';
                    statusColor = '#EF4444';
                }
                
                // Th√™m th√¥ng tin chi ti·∫øt n·∫øu c√≥
                if (status.processes && status.processes.length > 0) {
                    const process = status.processes[0];
                    statusText += `\nID: ${process.id} | Memory: ${process.memoryUsage.toFixed(1)}MB`;
                }
                
                statusElement.textContent = statusText;
                statusElement.style.color = statusColor;
                
                console.log('‚úÖ Service status updated:', status);
            } catch (e) {
                console.error('‚ùå Error parsing status data:', e);
                statusElement.textContent = '‚ùì Error loading status';
                statusElement.style.color = '#EF4444';
            }
        }
    }
    
    updateConfigPreview(content) {
        const previewElement = document.getElementById('configPreview');
        if (previewElement) {
            previewElement.textContent = content;
        }
    }
    
    // Method ƒë·ªÉ c·∫≠p nh·∫≠t service config t·ª´ C#
    updateServiceConfig(config) {
        if (config.flushInterval) {
            document.getElementById('flushInterval').value = config.flushInterval;
        }
        if (config.logLevel) {
            document.getElementById('logLevel').value = config.logLevel;
        }
        if (config.daemonMode) {
            document.getElementById('daemonMode').value = config.daemonMode;
        }
        if (config.parsersFile) {
            document.getElementById('parsersFile').value = config.parsersFile;
        }
    }
    
    // Method ƒë·ªÉ force update file paths
    forceUpdateFilePaths() {
        if (pendingFilePaths) {
            console.log('üìÅ Force updating file paths...');
            this.updateFilePaths(
                pendingFilePaths.configPath,
                pendingFilePaths.parsersPath,
                pendingFilePaths.logDir
            );
        }
    }
}

// Expose functions globally
window.updateServiceConfigFromCSharp = function(config) {
    if (configManager) {
        configManager.updateServiceConfig(config);
    }
};

window.updateFluentBitStatusFromCSharp = function(status) {
    if (configManager) {
        configManager.updateServiceStatus(status);
    }
};

window.updateConfigPreviewFromCSharp = function(content) {
    if (configManager) {
        configManager.updateConfigPreview(content);
    }
};

// Expose function ƒë·ªÉ C# c·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n file
window.updateFilePathsFromCSharp = function(filePaths) {
    if (configManager && filePaths) {
        configManager.updateFilePaths(
            filePaths.configPath,
            filePaths.parsersPath,
            filePaths.logDir
        );
    }
};

// Expose function v·ªõi t√™n m·ªõi ƒë·ªÉ tr√°nh conflict
window.updateFilePathsFromCSharpForConfigModule = function(filePaths) {
    console.log('üìÅ Received file paths from C#:', filePaths);
    console.log('üîç configManager status:', configManager);
    console.log('üîç Current active tab:', document.querySelector('.sidebar-item.active')?.getAttribute('data-tab'));
    
    // Parse JSON n·∫øu c·∫ßn
    let parsedFilePaths = filePaths;
    if (typeof filePaths === 'string') {
        try {
            parsedFilePaths = JSON.parse(filePaths);
            console.log('üìÅ Parsed file paths:', parsedFilePaths);
        } catch (e) {
            console.error('‚ùå Error parsing file paths JSON:', e);
            return;
        }
    }
    
    if (configManager && parsedFilePaths) {
        console.log('üìÅ Using parsed file paths:', parsedFilePaths);
        configManager.updateFilePaths(
            parsedFilePaths.configPath,
            parsedFilePaths.parsersPath,
            parsedFilePaths.logDir
        );
    } else {
        console.log('‚ùå configManager not available or filePaths is empty');
        
        // L∆∞u file paths ƒë·ªÉ s·ª≠ d·ª•ng sau
        if (parsedFilePaths) {
            pendingFilePaths = parsedFilePaths;
            console.log('üìÅ File paths saved for later use');
        }
        
        // N·∫øu configManager ch∆∞a c√≥, th·ª≠ kh·ªüi t·∫°o l·∫°i
        if (!configManager) {
            console.log('üîÑ Trying to initialize configManager...');
            window.initConfigTab();
        }
    }
};

// Expose force update function globally
window.forceUpdateConfigFilePaths = function() {
    if (configManager) {
        configManager.forceUpdateFilePaths();
    }
};

// Expose config sync functions globally
window.updateConfigSyncStatusFromCSharp = function(syncData) {
    if (configManager) {
        configManager.updateConfigSyncStatus(syncData);
    }
};



// Initialize config tab when clicked
document.addEventListener('DOMContentLoaded', function() {
    const configTab = document.querySelector('.sidebar-item[data-tab="config"]');
    if (configTab) {
        configTab.addEventListener('click', function() {
            if (!configManager) {
                window.initConfigTab();
            } else {
                // N·∫øu configManager ƒë√£ c√≥, th·ª≠ force update file paths
                configManager.forceUpdateFilePaths();
            }
        });
    }
});
